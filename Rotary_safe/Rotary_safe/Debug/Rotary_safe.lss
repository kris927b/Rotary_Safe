
Rotary_safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000008e8  0000097c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010c  0080010c  00000988  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009bb  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c1  00000000  00000000  00001443  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d6  00000000  00000000  00001c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  000022dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000443  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025e  00000000  00000000  0000287b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002ad9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c3 03 	call	0x786	; 0x786 <main>
  9e:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_comp>:
#include "rotEncLib.h"

void init_comp(){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
    pinMode(B5, OUTPUT, DISABLED); // LED as output
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	8d e0       	ldi	r24, 0x0D	; 13
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 09 01 	call	0x212	; 0x212 <pinMode>
    pinMode(B7, INPUT, ENABLED); // button as input
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 09 01 	call	0x212	; 0x212 <pinMode>
	pinMode(C0, INPUT, ENABLED);
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 09 01 	call	0x212	; 0x212 <pinMode>
	pinMode(C1, INPUT, ENABLED);
  de:	41 e0       	ldi	r20, 0x01	; 1
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	81 e1       	ldi	r24, 0x11	; 17
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 09 01 	call	0x212	; 0x212 <pinMode>
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <read_rot_encoder>:

uint8_t read_rot_encoder(){
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	00 d0       	rcall	.+0      	; 0xfa <read_rot_encoder+0x6>
  fa:	00 d0       	rcall	.+0      	; 0xfc <read_rot_encoder+0x8>
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
    uint16_t oldState = readValue(), state = 0;
 100:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <readValue>
 104:	88 2f       	mov	r24, r24
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	9a 83       	std	Y+2, r25	; 0x02
 10a:	89 83       	std	Y+1, r24	; 0x01
 10c:	1c 82       	std	Y+4, r1	; 0x04
 10e:	1b 82       	std	Y+3, r1	; 0x03
    while (1){
        state = readValue();
 110:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <readValue>
 114:	88 2f       	mov	r24, r24
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	9c 83       	std	Y+4, r25	; 0x04
 11a:	8b 83       	std	Y+3, r24	; 0x03
        if (state != oldState){
 11c:	2b 81       	ldd	r18, Y+3	; 0x03
 11e:	3c 81       	ldd	r19, Y+4	; 0x04
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	9a 81       	ldd	r25, Y+2	; 0x02
 124:	28 17       	cp	r18, r24
 126:	39 07       	cpc	r19, r25
 128:	a1 f0       	breq	.+40     	; 0x152 <read_rot_encoder+0x5e>
            if (state == 1 && oldState == 3){ //CCW
 12a:	8b 81       	ldd	r24, Y+3	; 0x03
 12c:	9c 81       	ldd	r25, Y+4	; 0x04
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	31 f4       	brne	.+12     	; 0x13e <read_rot_encoder+0x4a>
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	03 97       	sbiw	r24, 0x03	; 3
 138:	11 f4       	brne	.+4      	; 0x13e <read_rot_encoder+0x4a>
                return 0;
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0f c0       	rjmp	.+30     	; 0x15c <read_rot_encoder+0x68>
            } else if (state == 3 && oldState == 1){ //CW
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	9c 81       	ldd	r25, Y+4	; 0x04
 142:	03 97       	sbiw	r24, 0x03	; 3
 144:	31 f4       	brne	.+12     	; 0x152 <read_rot_encoder+0x5e>
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	9a 81       	ldd	r25, Y+2	; 0x02
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	11 f4       	brne	.+4      	; 0x152 <read_rot_encoder+0x5e>
                return 1;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	05 c0       	rjmp	.+10     	; 0x15c <read_rot_encoder+0x68>
            }
        }
        oldState = state;
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	9c 81       	ldd	r25, Y+4	; 0x04
 156:	9a 83       	std	Y+2, r25	; 0x02
 158:	89 83       	std	Y+1, r24	; 0x01
    }
 15a:	da cf       	rjmp	.-76     	; 0x110 <read_rot_encoder+0x1c>
}
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <blink_LED>:

void blink_LED(){
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	1f 92       	push	r1
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
    for (uint8_t i = 0; i < 5 ;i++){
 174:	19 82       	std	Y+1, r1	; 0x01
 176:	21 c0       	rjmp	.+66     	; 0x1ba <blink_LED+0x50>
        delay(200);
 178:	68 ec       	ldi	r22, 0xC8	; 200
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 8a 03 	call	0x714	; 0x714 <delay>
        PORTB |= (1 << PORTB5);
 184:	85 e2       	ldi	r24, 0x25	; 37
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	25 e2       	ldi	r18, 0x25	; 37
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	f9 01       	movw	r30, r18
 18e:	20 81       	ld	r18, Z
 190:	20 62       	ori	r18, 0x20	; 32
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
        delay(200);
 196:	68 ec       	ldi	r22, 0xC8	; 200
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 8a 03 	call	0x714	; 0x714 <delay>
        PORTB &= ~(1 << PORTB5);
 1a2:	85 e2       	ldi	r24, 0x25	; 37
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	25 e2       	ldi	r18, 0x25	; 37
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	2f 7d       	andi	r18, 0xDF	; 223
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
        oldState = state;
    }
}

void blink_LED(){
    for (uint8_t i = 0; i < 5 ;i++){
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
 1b8:	89 83       	std	Y+1, r24	; 0x01
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	85 30       	cpi	r24, 0x05	; 5
 1be:	e0 f2       	brcs	.-72     	; 0x178 <blink_LED+0xe>
        delay(200);
        PORTB |= (1 << PORTB5);
        delay(200);
        PORTB &= ~(1 << PORTB5);
    }
}
 1c0:	0f 90       	pop	r0
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <readValue>:

uint8_t readValue(){
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	1f 92       	push	r1
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
    uint8_t res = 0;
 1d2:	19 82       	std	Y+1, r1	; 0x01
    if (PINC & (1 << PINC0))
 1d4:	86 e2       	ldi	r24, 0x26	; 38
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	fc 01       	movw	r30, r24
 1da:	80 81       	ld	r24, Z
 1dc:	88 2f       	mov	r24, r24
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	81 70       	andi	r24, 0x01	; 1
 1e2:	99 27       	eor	r25, r25
 1e4:	89 2b       	or	r24, r25
 1e6:	19 f0       	breq	.+6      	; 0x1ee <readValue+0x26>
        res |= (1 << 1);
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	82 60       	ori	r24, 0x02	; 2
 1ec:	89 83       	std	Y+1, r24	; 0x01
    if (PINC & (1 << PINC1))
 1ee:	86 e2       	ldi	r24, 0x26	; 38
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	fc 01       	movw	r30, r24
 1f4:	80 81       	ld	r24, Z
 1f6:	88 2f       	mov	r24, r24
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	82 70       	andi	r24, 0x02	; 2
 1fc:	99 27       	eor	r25, r25
 1fe:	89 2b       	or	r24, r25
 200:	19 f0       	breq	.+6      	; 0x208 <readValue+0x40>
        res |= (1 << 0);
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	81 60       	ori	r24, 0x01	; 1
 206:	89 83       	std	Y+1, r24	; 0x01
    return res;
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	0f 90       	pop	r0
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <pinMode>:
 */

#include <avr/io.h>
#include "std_lib.h"

void pinMode(int pin, int mode, int pull_up) {
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	2a 97       	sbiw	r28, 0x0a	; 10
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	de bf       	out	0x3e, r29	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	cd bf       	out	0x3d, r28	; 61
 226:	9e 83       	std	Y+6, r25	; 0x06
 228:	8d 83       	std	Y+5, r24	; 0x05
 22a:	78 87       	std	Y+8, r23	; 0x08
 22c:	6f 83       	std	Y+7, r22	; 0x07
 22e:	5a 87       	std	Y+10, r21	; 0x0a
 230:	49 87       	std	Y+9, r20	; 0x09
	//Handle port D pins
    if (pin >= 0 && pin <= 7) {
 232:	8d 81       	ldd	r24, Y+5	; 0x05
 234:	9e 81       	ldd	r25, Y+6	; 0x06
 236:	99 23       	and	r25, r25
 238:	0c f4       	brge	.+2      	; 0x23c <pinMode+0x2a>
 23a:	84 c0       	rjmp	.+264    	; 0x344 <pinMode+0x132>
 23c:	8d 81       	ldd	r24, Y+5	; 0x05
 23e:	9e 81       	ldd	r25, Y+6	; 0x06
 240:	08 97       	sbiw	r24, 0x08	; 8
 242:	0c f0       	brlt	.+2      	; 0x246 <pinMode+0x34>
 244:	7f c0       	rjmp	.+254    	; 0x344 <pinMode+0x132>
        switch (mode) {
 246:	8f 81       	ldd	r24, Y+7	; 0x07
 248:	98 85       	ldd	r25, Y+8	; 0x08
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	49 f1       	breq	.+82     	; 0x2a0 <pinMode+0x8e>
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	09 f0       	breq	.+2      	; 0x254 <pinMode+0x42>
					PORTD &= ~(1 << pin);
					DDRD &= ~(1 << pin);
				}
                break;
        }
    } else if (pin >= 8 && pin <= 15) {
 252:	93 c1       	rjmp	.+806    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
void pinMode(int pin, int mode, int pull_up) {
	//Handle port D pins
    if (pin >= 0 && pin <= 7) {
        switch (mode) {
            case OUTPUT:
                DDRD |= (1 << pin);
 254:	8a e2       	ldi	r24, 0x2A	; 42
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	2a e2       	ldi	r18, 0x2A	; 42
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	f9 01       	movw	r30, r18
 25e:	20 81       	ld	r18, Z
 260:	42 2f       	mov	r20, r18
 262:	21 e0       	ldi	r18, 0x01	; 1
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	0d 80       	ldd	r0, Y+5	; 0x05
 268:	02 c0       	rjmp	.+4      	; 0x26e <pinMode+0x5c>
 26a:	22 0f       	add	r18, r18
 26c:	33 1f       	adc	r19, r19
 26e:	0a 94       	dec	r0
 270:	e2 f7       	brpl	.-8      	; 0x26a <pinMode+0x58>
 272:	24 2b       	or	r18, r20
 274:	fc 01       	movw	r30, r24
 276:	20 83       	st	Z, r18
				PORTD &= ~(1 << pin);
 278:	8b e2       	ldi	r24, 0x2B	; 43
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	2b e2       	ldi	r18, 0x2B	; 43
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	f9 01       	movw	r30, r18
 282:	20 81       	ld	r18, Z
 284:	42 2f       	mov	r20, r18
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	0d 80       	ldd	r0, Y+5	; 0x05
 28c:	02 c0       	rjmp	.+4      	; 0x292 <pinMode+0x80>
 28e:	22 0f       	add	r18, r18
 290:	33 1f       	adc	r19, r19
 292:	0a 94       	dec	r0
 294:	e2 f7       	brpl	.-8      	; 0x28e <pinMode+0x7c>
 296:	20 95       	com	r18
 298:	24 23       	and	r18, r20
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18
                break;
 29e:	51 c0       	rjmp	.+162    	; 0x342 <pinMode+0x130>
            case INPUT:
				if (pull_up) {
 2a0:	89 85       	ldd	r24, Y+9	; 0x09
 2a2:	9a 85       	ldd	r25, Y+10	; 0x0a
 2a4:	89 2b       	or	r24, r25
 2a6:	31 f1       	breq	.+76     	; 0x2f4 <pinMode+0xe2>
					PORTD |= (1 << pin);
 2a8:	8b e2       	ldi	r24, 0x2B	; 43
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	2b e2       	ldi	r18, 0x2B	; 43
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	f9 01       	movw	r30, r18
 2b2:	20 81       	ld	r18, Z
 2b4:	42 2f       	mov	r20, r18
 2b6:	21 e0       	ldi	r18, 0x01	; 1
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	0d 80       	ldd	r0, Y+5	; 0x05
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <pinMode+0xb0>
 2be:	22 0f       	add	r18, r18
 2c0:	33 1f       	adc	r19, r19
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <pinMode+0xac>
 2c6:	24 2b       	or	r18, r20
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18
					DDRD &= ~(1 << pin);
 2cc:	8a e2       	ldi	r24, 0x2A	; 42
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	2a e2       	ldi	r18, 0x2A	; 42
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	f9 01       	movw	r30, r18
 2d6:	20 81       	ld	r18, Z
 2d8:	42 2f       	mov	r20, r18
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	0d 80       	ldd	r0, Y+5	; 0x05
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <pinMode+0xd4>
 2e2:	22 0f       	add	r18, r18
 2e4:	33 1f       	adc	r19, r19
 2e6:	0a 94       	dec	r0
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <pinMode+0xd0>
 2ea:	20 95       	com	r18
 2ec:	24 23       	and	r18, r20
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18
				} else {
					PORTD &= ~(1 << pin);
					DDRD &= ~(1 << pin);
				}
                break;
 2f2:	26 c0       	rjmp	.+76     	; 0x340 <pinMode+0x12e>
            case INPUT:
				if (pull_up) {
					PORTD |= (1 << pin);
					DDRD &= ~(1 << pin);
				} else {
					PORTD &= ~(1 << pin);
 2f4:	8b e2       	ldi	r24, 0x2B	; 43
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	2b e2       	ldi	r18, 0x2B	; 43
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	f9 01       	movw	r30, r18
 2fe:	20 81       	ld	r18, Z
 300:	42 2f       	mov	r20, r18
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	0d 80       	ldd	r0, Y+5	; 0x05
 308:	02 c0       	rjmp	.+4      	; 0x30e <pinMode+0xfc>
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <pinMode+0xf8>
 312:	20 95       	com	r18
 314:	24 23       	and	r18, r20
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
					DDRD &= ~(1 << pin);
 31a:	8a e2       	ldi	r24, 0x2A	; 42
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	2a e2       	ldi	r18, 0x2A	; 42
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	f9 01       	movw	r30, r18
 324:	20 81       	ld	r18, Z
 326:	42 2f       	mov	r20, r18
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	0d 80       	ldd	r0, Y+5	; 0x05
 32e:	02 c0       	rjmp	.+4      	; 0x334 <pinMode+0x122>
 330:	22 0f       	add	r18, r18
 332:	33 1f       	adc	r19, r19
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <pinMode+0x11e>
 338:	20 95       	com	r18
 33a:	24 23       	and	r18, r20
 33c:	fc 01       	movw	r30, r24
 33e:	20 83       	st	Z, r18
				}
                break;
 340:	00 00       	nop
        }
    } else if (pin >= 8 && pin <= 15) {
 342:	1b c1       	rjmp	.+566    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 344:	8d 81       	ldd	r24, Y+5	; 0x05
 346:	9e 81       	ldd	r25, Y+6	; 0x06
 348:	08 97       	sbiw	r24, 0x08	; 8
 34a:	0c f4       	brge	.+2      	; 0x34e <pinMode+0x13c>
 34c:	89 c0       	rjmp	.+274    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 34e:	8d 81       	ldd	r24, Y+5	; 0x05
 350:	9e 81       	ldd	r25, Y+6	; 0x06
 352:	40 97       	sbiw	r24, 0x10	; 16
 354:	0c f0       	brlt	.+2      	; 0x358 <pinMode+0x146>
 356:	84 c0       	rjmp	.+264    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		//Handle port B pins
		int pin_ = pin - 8;
 358:	8d 81       	ldd	r24, Y+5	; 0x05
 35a:	9e 81       	ldd	r25, Y+6	; 0x06
 35c:	08 97       	sbiw	r24, 0x08	; 8
 35e:	9a 83       	std	Y+2, r25	; 0x02
 360:	89 83       	std	Y+1, r24	; 0x01
		switch (mode) {
 362:	8f 81       	ldd	r24, Y+7	; 0x07
 364:	98 85       	ldd	r25, Y+8	; 0x08
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	49 f1       	breq	.+82     	; 0x3bc <pinMode+0x1aa>
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	09 f0       	breq	.+2      	; 0x370 <pinMode+0x15e>
					PORTD &= ~(1 << pin);
					DDRD &= ~(1 << pin);
				}
                break;
        }
    } else if (pin >= 8 && pin <= 15) {
 36e:	05 c1       	rjmp	.+522    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
		//Handle port B pins
		int pin_ = pin - 8;
		switch (mode) {
			case OUTPUT:
			DDRB |= (1 << pin_);
 370:	84 e2       	ldi	r24, 0x24	; 36
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	24 e2       	ldi	r18, 0x24	; 36
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	f9 01       	movw	r30, r18
 37a:	20 81       	ld	r18, Z
 37c:	42 2f       	mov	r20, r18
 37e:	21 e0       	ldi	r18, 0x01	; 1
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	09 80       	ldd	r0, Y+1	; 0x01
 384:	02 c0       	rjmp	.+4      	; 0x38a <pinMode+0x178>
 386:	22 0f       	add	r18, r18
 388:	33 1f       	adc	r19, r19
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <pinMode+0x174>
 38e:	24 2b       	or	r18, r20
 390:	fc 01       	movw	r30, r24
 392:	20 83       	st	Z, r18
			PORTB &= ~(1 << pin_);
 394:	85 e2       	ldi	r24, 0x25	; 37
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	25 e2       	ldi	r18, 0x25	; 37
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	f9 01       	movw	r30, r18
 39e:	20 81       	ld	r18, Z
 3a0:	42 2f       	mov	r20, r18
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	09 80       	ldd	r0, Y+1	; 0x01
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <pinMode+0x19c>
 3aa:	22 0f       	add	r18, r18
 3ac:	33 1f       	adc	r19, r19
 3ae:	0a 94       	dec	r0
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <pinMode+0x198>
 3b2:	20 95       	com	r18
 3b4:	24 23       	and	r18, r20
 3b6:	fc 01       	movw	r30, r24
 3b8:	20 83       	st	Z, r18
			break;
 3ba:	51 c0       	rjmp	.+162    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			case INPUT:
			if (pull_up) {
 3bc:	89 85       	ldd	r24, Y+9	; 0x09
 3be:	9a 85       	ldd	r25, Y+10	; 0x0a
 3c0:	89 2b       	or	r24, r25
 3c2:	31 f1       	breq	.+76     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				PORTB |= (1 << pin_);
 3c4:	85 e2       	ldi	r24, 0x25	; 37
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	25 e2       	ldi	r18, 0x25	; 37
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	f9 01       	movw	r30, r18
 3ce:	20 81       	ld	r18, Z
 3d0:	42 2f       	mov	r20, r18
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	09 80       	ldd	r0, Y+1	; 0x01
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <pinMode+0x1cc>
 3da:	22 0f       	add	r18, r18
 3dc:	33 1f       	adc	r19, r19
 3de:	0a 94       	dec	r0
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <pinMode+0x1c8>
 3e2:	24 2b       	or	r18, r20
 3e4:	fc 01       	movw	r30, r24
 3e6:	20 83       	st	Z, r18
				DDRB &= ~(1 << pin_);
 3e8:	84 e2       	ldi	r24, 0x24	; 36
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	24 e2       	ldi	r18, 0x24	; 36
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	f9 01       	movw	r30, r18
 3f2:	20 81       	ld	r18, Z
 3f4:	42 2f       	mov	r20, r18
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	09 80       	ldd	r0, Y+1	; 0x01
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <pinMode+0x1ec>
 406:	20 95       	com	r18
 408:	24 23       	and	r18, r20
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
				} else {
				PORTB &= ~(1 << pin_);
				DDRB &= ~(1 << pin_);
			}
			break;
 40e:	26 c0       	rjmp	.+76     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			case INPUT:
			if (pull_up) {
				PORTB |= (1 << pin_);
				DDRB &= ~(1 << pin_);
				} else {
				PORTB &= ~(1 << pin_);
 410:	85 e2       	ldi	r24, 0x25	; 37
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	25 e2       	ldi	r18, 0x25	; 37
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	f9 01       	movw	r30, r18
 41a:	20 81       	ld	r18, Z
 41c:	42 2f       	mov	r20, r18
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	09 80       	ldd	r0, Y+1	; 0x01
 424:	02 c0       	rjmp	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 426:	22 0f       	add	r18, r18
 428:	33 1f       	adc	r19, r19
 42a:	0a 94       	dec	r0
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42e:	20 95       	com	r18
 430:	24 23       	and	r18, r20
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18
				DDRB &= ~(1 << pin_);
 436:	84 e2       	ldi	r24, 0x24	; 36
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	24 e2       	ldi	r18, 0x24	; 36
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	f9 01       	movw	r30, r18
 440:	20 81       	ld	r18, Z
 442:	42 2f       	mov	r20, r18
 444:	21 e0       	ldi	r18, 0x01	; 1
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	09 80       	ldd	r0, Y+1	; 0x01
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44c:	22 0f       	add	r18, r18
 44e:	33 1f       	adc	r19, r19
 450:	0a 94       	dec	r0
 452:	e2 f7       	brpl	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 454:	20 95       	com	r18
 456:	24 23       	and	r18, r20
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
			}
			break;
 45c:	00 00       	nop
					PORTD &= ~(1 << pin);
					DDRD &= ~(1 << pin);
				}
                break;
        }
    } else if (pin >= 8 && pin <= 15) {
 45e:	8d c0       	rjmp	.+282    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
				PORTB &= ~(1 << pin_);
				DDRB &= ~(1 << pin_);
			}
			break;
		}
    } else if (pin >= 16 && pin <= 21) {
 460:	8d 81       	ldd	r24, Y+5	; 0x05
 462:	9e 81       	ldd	r25, Y+6	; 0x06
 464:	40 97       	sbiw	r24, 0x10	; 16
 466:	0c f4       	brge	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 468:	88 c0       	rjmp	.+272    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 46a:	8d 81       	ldd	r24, Y+5	; 0x05
 46c:	9e 81       	ldd	r25, Y+6	; 0x06
 46e:	46 97       	sbiw	r24, 0x16	; 22
 470:	0c f0       	brlt	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 472:	83 c0       	rjmp	.+262    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
        //Handle port C pins
		int pin_ = pin - 16;
 474:	8d 81       	ldd	r24, Y+5	; 0x05
 476:	9e 81       	ldd	r25, Y+6	; 0x06
 478:	40 97       	sbiw	r24, 0x10	; 16
 47a:	9c 83       	std	Y+4, r25	; 0x04
 47c:	8b 83       	std	Y+3, r24	; 0x03
		switch (mode) {
 47e:	8f 81       	ldd	r24, Y+7	; 0x07
 480:	98 85       	ldd	r25, Y+8	; 0x08
 482:	00 97       	sbiw	r24, 0x00	; 0
 484:	49 f1       	breq	.+82     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	09 f0       	breq	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 48a:	77 c0       	rjmp	.+238    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
			case OUTPUT:
			DDRC |= (1 << pin_);
 48c:	87 e2       	ldi	r24, 0x27	; 39
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	27 e2       	ldi	r18, 0x27	; 39
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	f9 01       	movw	r30, r18
 496:	20 81       	ld	r18, Z
 498:	42 2f       	mov	r20, r18
 49a:	21 e0       	ldi	r18, 0x01	; 1
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	0b 80       	ldd	r0, Y+3	; 0x03
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a2:	22 0f       	add	r18, r18
 4a4:	33 1f       	adc	r19, r19
 4a6:	0a 94       	dec	r0
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4aa:	24 2b       	or	r18, r20
 4ac:	fc 01       	movw	r30, r24
 4ae:	20 83       	st	Z, r18
			PORTC &= ~(1 << pin_);
 4b0:	88 e2       	ldi	r24, 0x28	; 40
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	28 e2       	ldi	r18, 0x28	; 40
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	f9 01       	movw	r30, r18
 4ba:	20 81       	ld	r18, Z
 4bc:	42 2f       	mov	r20, r18
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	0b 80       	ldd	r0, Y+3	; 0x03
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c6:	22 0f       	add	r18, r18
 4c8:	33 1f       	adc	r19, r19
 4ca:	0a 94       	dec	r0
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ce:	20 95       	com	r18
 4d0:	24 23       	and	r18, r20
 4d2:	fc 01       	movw	r30, r24
 4d4:	20 83       	st	Z, r18
			break;
 4d6:	51 c0       	rjmp	.+162    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
			case INPUT:
			if (pull_up) {
 4d8:	89 85       	ldd	r24, Y+9	; 0x09
 4da:	9a 85       	ldd	r25, Y+10	; 0x0a
 4dc:	89 2b       	or	r24, r25
 4de:	31 f1       	breq	.+76     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
				PORTC |= (1 << pin_);
 4e0:	88 e2       	ldi	r24, 0x28	; 40
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	28 e2       	ldi	r18, 0x28	; 40
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	f9 01       	movw	r30, r18
 4ea:	20 81       	ld	r18, Z
 4ec:	42 2f       	mov	r20, r18
 4ee:	21 e0       	ldi	r18, 0x01	; 1
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	0b 80       	ldd	r0, Y+3	; 0x03
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f6:	22 0f       	add	r18, r18
 4f8:	33 1f       	adc	r19, r19
 4fa:	0a 94       	dec	r0
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4fe:	24 2b       	or	r18, r20
 500:	fc 01       	movw	r30, r24
 502:	20 83       	st	Z, r18
				DDRC &= ~(1 << pin_);
 504:	87 e2       	ldi	r24, 0x27	; 39
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	27 e2       	ldi	r18, 0x27	; 39
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	f9 01       	movw	r30, r18
 50e:	20 81       	ld	r18, Z
 510:	42 2f       	mov	r20, r18
 512:	21 e0       	ldi	r18, 0x01	; 1
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	0b 80       	ldd	r0, Y+3	; 0x03
 518:	02 c0       	rjmp	.+4      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 51a:	22 0f       	add	r18, r18
 51c:	33 1f       	adc	r19, r19
 51e:	0a 94       	dec	r0
 520:	e2 f7       	brpl	.-8      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 522:	20 95       	com	r18
 524:	24 23       	and	r18, r20
 526:	fc 01       	movw	r30, r24
 528:	20 83       	st	Z, r18
 52a:	26 c0       	rjmp	.+76     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
				} else {
				PORTC &= ~(1 << pin_);
 52c:	88 e2       	ldi	r24, 0x28	; 40
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	28 e2       	ldi	r18, 0x28	; 40
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	f9 01       	movw	r30, r18
 536:	20 81       	ld	r18, Z
 538:	42 2f       	mov	r20, r18
 53a:	21 e0       	ldi	r18, 0x01	; 1
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	0b 80       	ldd	r0, Y+3	; 0x03
 540:	02 c0       	rjmp	.+4      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 542:	22 0f       	add	r18, r18
 544:	33 1f       	adc	r19, r19
 546:	0a 94       	dec	r0
 548:	e2 f7       	brpl	.-8      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 54a:	20 95       	com	r18
 54c:	24 23       	and	r18, r20
 54e:	fc 01       	movw	r30, r24
 550:	20 83       	st	Z, r18
				DDRC &= ~(1 << pin_);
 552:	87 e2       	ldi	r24, 0x27	; 39
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	27 e2       	ldi	r18, 0x27	; 39
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	f9 01       	movw	r30, r18
 55c:	20 81       	ld	r18, Z
 55e:	42 2f       	mov	r20, r18
 560:	21 e0       	ldi	r18, 0x01	; 1
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	0b 80       	ldd	r0, Y+3	; 0x03
 566:	02 c0       	rjmp	.+4      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 568:	22 0f       	add	r18, r18
 56a:	33 1f       	adc	r19, r19
 56c:	0a 94       	dec	r0
 56e:	e2 f7       	brpl	.-8      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 570:	20 95       	com	r18
 572:	24 23       	and	r18, r20
 574:	fc 01       	movw	r30, r24
 576:	20 83       	st	Z, r18
			}
			break;
 578:	00 00       	nop
		}
    }
}
 57a:	2a 96       	adiw	r28, 0x0a	; 10
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	f8 94       	cli
 580:	de bf       	out	0x3e, r29	; 62
 582:	0f be       	out	0x3f, r0	; 63
 584:	cd bf       	out	0x3d, r28	; 61
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	08 95       	ret

0000058c <digitalWrite>:

void digitalWrite(int pin, int value) {
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	cd b7       	in	r28, 0x3d	; 61
 592:	de b7       	in	r29, 0x3e	; 62
 594:	28 97       	sbiw	r28, 0x08	; 8
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	f8 94       	cli
 59a:	de bf       	out	0x3e, r29	; 62
 59c:	0f be       	out	0x3f, r0	; 63
 59e:	cd bf       	out	0x3d, r28	; 61
 5a0:	9e 83       	std	Y+6, r25	; 0x06
 5a2:	8d 83       	std	Y+5, r24	; 0x05
 5a4:	78 87       	std	Y+8, r23	; 0x08
 5a6:	6f 83       	std	Y+7, r22	; 0x07
	//Handle port D pins
	if (pin >= 0 && pin <= 7) {
 5a8:	8d 81       	ldd	r24, Y+5	; 0x05
 5aa:	9e 81       	ldd	r25, Y+6	; 0x06
 5ac:	99 23       	and	r25, r25
 5ae:	9c f1       	brlt	.+102    	; 0x616 <digitalWrite+0x8a>
 5b0:	8d 81       	ldd	r24, Y+5	; 0x05
 5b2:	9e 81       	ldd	r25, Y+6	; 0x06
 5b4:	08 97       	sbiw	r24, 0x08	; 8
 5b6:	7c f5       	brge	.+94     	; 0x616 <digitalWrite+0x8a>
		switch (value) {
 5b8:	8f 81       	ldd	r24, Y+7	; 0x07
 5ba:	98 85       	ldd	r25, Y+8	; 0x08
 5bc:	00 97       	sbiw	r24, 0x00	; 0
 5be:	b1 f0       	breq	.+44     	; 0x5ec <digitalWrite+0x60>
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	09 f0       	breq	.+2      	; 0x5c6 <digitalWrite+0x3a>
				break;
			case LOW:
				PORTD &= ~(1 << pin);
				break;
		}
	} else if (pin >= 8 && pin <= 15) {
 5c4:	9e c0       	rjmp	.+316    	; 0x702 <digitalWrite+0x176>
void digitalWrite(int pin, int value) {
	//Handle port D pins
	if (pin >= 0 && pin <= 7) {
		switch (value) {
			case HIGH:
				PORTD |= (1 << pin);
 5c6:	8b e2       	ldi	r24, 0x2B	; 43
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	2b e2       	ldi	r18, 0x2B	; 43
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	f9 01       	movw	r30, r18
 5d0:	20 81       	ld	r18, Z
 5d2:	42 2f       	mov	r20, r18
 5d4:	21 e0       	ldi	r18, 0x01	; 1
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	0d 80       	ldd	r0, Y+5	; 0x05
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <digitalWrite+0x54>
 5dc:	22 0f       	add	r18, r18
 5de:	33 1f       	adc	r19, r19
 5e0:	0a 94       	dec	r0
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <digitalWrite+0x50>
 5e4:	24 2b       	or	r18, r20
 5e6:	fc 01       	movw	r30, r24
 5e8:	20 83       	st	Z, r18
				break;
 5ea:	14 c0       	rjmp	.+40     	; 0x614 <digitalWrite+0x88>
			case LOW:
				PORTD &= ~(1 << pin);
 5ec:	8b e2       	ldi	r24, 0x2B	; 43
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	2b e2       	ldi	r18, 0x2B	; 43
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	f9 01       	movw	r30, r18
 5f6:	20 81       	ld	r18, Z
 5f8:	42 2f       	mov	r20, r18
 5fa:	21 e0       	ldi	r18, 0x01	; 1
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	0d 80       	ldd	r0, Y+5	; 0x05
 600:	02 c0       	rjmp	.+4      	; 0x606 <digitalWrite+0x7a>
 602:	22 0f       	add	r18, r18
 604:	33 1f       	adc	r19, r19
 606:	0a 94       	dec	r0
 608:	e2 f7       	brpl	.-8      	; 0x602 <digitalWrite+0x76>
 60a:	20 95       	com	r18
 60c:	24 23       	and	r18, r20
 60e:	fc 01       	movw	r30, r24
 610:	20 83       	st	Z, r18
				break;
 612:	00 00       	nop
		}
	} else if (pin >= 8 && pin <= 15) {
 614:	76 c0       	rjmp	.+236    	; 0x702 <digitalWrite+0x176>
 616:	8d 81       	ldd	r24, Y+5	; 0x05
 618:	9e 81       	ldd	r25, Y+6	; 0x06
 61a:	08 97       	sbiw	r24, 0x08	; 8
 61c:	c4 f1       	brlt	.+112    	; 0x68e <digitalWrite+0x102>
 61e:	8d 81       	ldd	r24, Y+5	; 0x05
 620:	9e 81       	ldd	r25, Y+6	; 0x06
 622:	40 97       	sbiw	r24, 0x10	; 16
 624:	a4 f5       	brge	.+104    	; 0x68e <digitalWrite+0x102>
		//Handle port B pins
		int pin_ = pin - 8;
 626:	8d 81       	ldd	r24, Y+5	; 0x05
 628:	9e 81       	ldd	r25, Y+6	; 0x06
 62a:	08 97       	sbiw	r24, 0x08	; 8
 62c:	9a 83       	std	Y+2, r25	; 0x02
 62e:	89 83       	std	Y+1, r24	; 0x01
		switch (value) {
 630:	8f 81       	ldd	r24, Y+7	; 0x07
 632:	98 85       	ldd	r25, Y+8	; 0x08
 634:	00 97       	sbiw	r24, 0x00	; 0
 636:	b1 f0       	breq	.+44     	; 0x664 <digitalWrite+0xd8>
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	09 f0       	breq	.+2      	; 0x63e <digitalWrite+0xb2>
				break;
			case LOW:
				PORTD &= ~(1 << pin);
				break;
		}
	} else if (pin >= 8 && pin <= 15) {
 63c:	62 c0       	rjmp	.+196    	; 0x702 <digitalWrite+0x176>
		//Handle port B pins
		int pin_ = pin - 8;
		switch (value) {
			case HIGH:
				PORTB |= (1 << pin_);
 63e:	85 e2       	ldi	r24, 0x25	; 37
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	25 e2       	ldi	r18, 0x25	; 37
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	f9 01       	movw	r30, r18
 648:	20 81       	ld	r18, Z
 64a:	42 2f       	mov	r20, r18
 64c:	21 e0       	ldi	r18, 0x01	; 1
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	09 80       	ldd	r0, Y+1	; 0x01
 652:	02 c0       	rjmp	.+4      	; 0x658 <digitalWrite+0xcc>
 654:	22 0f       	add	r18, r18
 656:	33 1f       	adc	r19, r19
 658:	0a 94       	dec	r0
 65a:	e2 f7       	brpl	.-8      	; 0x654 <digitalWrite+0xc8>
 65c:	24 2b       	or	r18, r20
 65e:	fc 01       	movw	r30, r24
 660:	20 83       	st	Z, r18
				break;
 662:	14 c0       	rjmp	.+40     	; 0x68c <digitalWrite+0x100>
			case LOW:
				PORTB &= ~(1 << pin_);
 664:	85 e2       	ldi	r24, 0x25	; 37
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	25 e2       	ldi	r18, 0x25	; 37
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	f9 01       	movw	r30, r18
 66e:	20 81       	ld	r18, Z
 670:	42 2f       	mov	r20, r18
 672:	21 e0       	ldi	r18, 0x01	; 1
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	09 80       	ldd	r0, Y+1	; 0x01
 678:	02 c0       	rjmp	.+4      	; 0x67e <digitalWrite+0xf2>
 67a:	22 0f       	add	r18, r18
 67c:	33 1f       	adc	r19, r19
 67e:	0a 94       	dec	r0
 680:	e2 f7       	brpl	.-8      	; 0x67a <digitalWrite+0xee>
 682:	20 95       	com	r18
 684:	24 23       	and	r18, r20
 686:	fc 01       	movw	r30, r24
 688:	20 83       	st	Z, r18
				break;
 68a:	00 00       	nop
				break;
			case LOW:
				PORTD &= ~(1 << pin);
				break;
		}
	} else if (pin >= 8 && pin <= 15) {
 68c:	3a c0       	rjmp	.+116    	; 0x702 <digitalWrite+0x176>
				break;
			case LOW:
				PORTB &= ~(1 << pin_);
				break;
		}
	} else if (pin >= 16 && pin <= 21) {
 68e:	8d 81       	ldd	r24, Y+5	; 0x05
 690:	9e 81       	ldd	r25, Y+6	; 0x06
 692:	40 97       	sbiw	r24, 0x10	; 16
 694:	b4 f1       	brlt	.+108    	; 0x702 <digitalWrite+0x176>
 696:	8d 81       	ldd	r24, Y+5	; 0x05
 698:	9e 81       	ldd	r25, Y+6	; 0x06
 69a:	46 97       	sbiw	r24, 0x16	; 22
 69c:	94 f5       	brge	.+100    	; 0x702 <digitalWrite+0x176>
		//Handle port C pins
		int pin_ = pin - 14;
 69e:	8d 81       	ldd	r24, Y+5	; 0x05
 6a0:	9e 81       	ldd	r25, Y+6	; 0x06
 6a2:	0e 97       	sbiw	r24, 0x0e	; 14
 6a4:	9c 83       	std	Y+4, r25	; 0x04
 6a6:	8b 83       	std	Y+3, r24	; 0x03
		switch (value) {
 6a8:	8f 81       	ldd	r24, Y+7	; 0x07
 6aa:	98 85       	ldd	r25, Y+8	; 0x08
 6ac:	00 97       	sbiw	r24, 0x00	; 0
 6ae:	a9 f0       	breq	.+42     	; 0x6da <digitalWrite+0x14e>
 6b0:	01 97       	sbiw	r24, 0x01	; 1
 6b2:	39 f5       	brne	.+78     	; 0x702 <digitalWrite+0x176>
			case HIGH:
				PORTC |= (1 << pin_);
 6b4:	88 e2       	ldi	r24, 0x28	; 40
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	28 e2       	ldi	r18, 0x28	; 40
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	f9 01       	movw	r30, r18
 6be:	20 81       	ld	r18, Z
 6c0:	42 2f       	mov	r20, r18
 6c2:	21 e0       	ldi	r18, 0x01	; 1
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	0b 80       	ldd	r0, Y+3	; 0x03
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <digitalWrite+0x142>
 6ca:	22 0f       	add	r18, r18
 6cc:	33 1f       	adc	r19, r19
 6ce:	0a 94       	dec	r0
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <digitalWrite+0x13e>
 6d2:	24 2b       	or	r18, r20
 6d4:	fc 01       	movw	r30, r24
 6d6:	20 83       	st	Z, r18
				break;
 6d8:	14 c0       	rjmp	.+40     	; 0x702 <digitalWrite+0x176>
			case LOW:
				PORTC &= ~(1 << pin_);
 6da:	88 e2       	ldi	r24, 0x28	; 40
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	28 e2       	ldi	r18, 0x28	; 40
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	f9 01       	movw	r30, r18
 6e4:	20 81       	ld	r18, Z
 6e6:	42 2f       	mov	r20, r18
 6e8:	21 e0       	ldi	r18, 0x01	; 1
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	0b 80       	ldd	r0, Y+3	; 0x03
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <digitalWrite+0x168>
 6f0:	22 0f       	add	r18, r18
 6f2:	33 1f       	adc	r19, r19
 6f4:	0a 94       	dec	r0
 6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <digitalWrite+0x164>
 6f8:	20 95       	com	r18
 6fa:	24 23       	and	r18, r20
 6fc:	fc 01       	movw	r30, r24
 6fe:	20 83       	st	Z, r18
				break;
 700:	00 00       	nop
		}
	}

}
 702:	28 96       	adiw	r28, 0x08	; 8
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	f8 94       	cli
 708:	de bf       	out	0x3e, r29	; 62
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	cd bf       	out	0x3d, r28	; 61
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	08 95       	ret

00000714 <delay>:

/* Delay function by Farzad */
void delay(uint32_t ms) {
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	cd b7       	in	r28, 0x3d	; 61
 71a:	de b7       	in	r29, 0x3e	; 62
 71c:	28 97       	sbiw	r28, 0x08	; 8
 71e:	0f b6       	in	r0, 0x3f	; 63
 720:	f8 94       	cli
 722:	de bf       	out	0x3e, r29	; 62
 724:	0f be       	out	0x3f, r0	; 63
 726:	cd bf       	out	0x3d, r28	; 61
 728:	6d 83       	std	Y+5, r22	; 0x05
 72a:	7e 83       	std	Y+6, r23	; 0x06
 72c:	8f 83       	std	Y+7, r24	; 0x07
 72e:	98 87       	std	Y+8, r25	; 0x08
	uint32_t i = ms * 471;
 730:	2d 81       	ldd	r18, Y+5	; 0x05
 732:	3e 81       	ldd	r19, Y+6	; 0x06
 734:	4f 81       	ldd	r20, Y+7	; 0x07
 736:	58 85       	ldd	r21, Y+8	; 0x08
 738:	87 ed       	ldi	r24, 0xD7	; 215
 73a:	91 e0       	ldi	r25, 0x01	; 1
 73c:	dc 01       	movw	r26, r24
 73e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__muluhisi3>
 742:	dc 01       	movw	r26, r24
 744:	cb 01       	movw	r24, r22
 746:	89 83       	std	Y+1, r24	; 0x01
 748:	9a 83       	std	Y+2, r25	; 0x02
 74a:	ab 83       	std	Y+3, r26	; 0x03
 74c:	bc 83       	std	Y+4, r27	; 0x04
	while(--i > 0);
 74e:	89 81       	ldd	r24, Y+1	; 0x01
 750:	9a 81       	ldd	r25, Y+2	; 0x02
 752:	ab 81       	ldd	r26, Y+3	; 0x03
 754:	bc 81       	ldd	r27, Y+4	; 0x04
 756:	01 97       	sbiw	r24, 0x01	; 1
 758:	a1 09       	sbc	r26, r1
 75a:	b1 09       	sbc	r27, r1
 75c:	89 83       	std	Y+1, r24	; 0x01
 75e:	9a 83       	std	Y+2, r25	; 0x02
 760:	ab 83       	std	Y+3, r26	; 0x03
 762:	bc 83       	std	Y+4, r27	; 0x04
 764:	89 81       	ldd	r24, Y+1	; 0x01
 766:	9a 81       	ldd	r25, Y+2	; 0x02
 768:	ab 81       	ldd	r26, Y+3	; 0x03
 76a:	bc 81       	ldd	r27, Y+4	; 0x04
 76c:	89 2b       	or	r24, r25
 76e:	8a 2b       	or	r24, r26
 770:	8b 2b       	or	r24, r27
 772:	69 f7       	brne	.-38     	; 0x74e <delay+0x3a>
 774:	28 96       	adiw	r28, 0x08	; 8
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	f8 94       	cli
 77a:	de bf       	out	0x3e, r29	; 62
 77c:	0f be       	out	0x3f, r0	; 63
 77e:	cd bf       	out	0x3d, r28	; 61
 780:	df 91       	pop	r29
 782:	cf 91       	pop	r28
 784:	08 95       	ret

00000786 <main>:
const int code[4] = {9, 3, 5, 1}; //Code for the safe
int c_Digit = 0;
int detent = 0;
int locked = 1;

int main(void) {
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
 78a:	cd b7       	in	r28, 0x3d	; 61
 78c:	de b7       	in	r29, 0x3e	; 62
	//Init components
	init_comp();
 78e:	0e 94 53 00 	call	0xa6	; 0xa6 <init_comp>
	//Main loop to handle the program
    while (1) {
		//Loop to handle the unlocking program
		while (locked) {
 792:	65 c0       	rjmp	.+202    	; 0x85e <main+0xd8>
			r_DR = read_rot_encoder();	//Read the Rotary encoder
 794:	0e 94 7a 00 	call	0xf4	; 0xf4 <read_rot_encoder>
 798:	88 2f       	mov	r24, r24
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <r_DR+0x1>
 7a0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <r_DR>
			if (r_DR == DR){ //Is the direction correct?
 7a4:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <r_DR>
 7a8:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <r_DR+0x1>
 7ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <DR>
 7b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <DR+0x1>
 7b4:	28 17       	cp	r18, r24
 7b6:	39 07       	cpc	r19, r25
 7b8:	09 f0       	breq	.+2      	; 0x7bc <main+0x36>
 7ba:	47 c0       	rjmp	.+142    	; 0x84a <main+0xc4>
				//Yes:
				detent++; //detent++;
 7bc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <detent>
 7c0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <detent+0x1>
 7c4:	01 96       	adiw	r24, 0x01	; 1
 7c6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <detent+0x1>
 7ca:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <detent>
				if (detent == code[c_Digit]){ //Is detent == to code[c_Digit]?
 7ce:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 7d2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 7d6:	88 0f       	add	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	8c 5f       	subi	r24, 0xFC	; 252
 7dc:	9e 4f       	sbci	r25, 0xFE	; 254
 7de:	fc 01       	movw	r30, r24
 7e0:	20 81       	ld	r18, Z
 7e2:	31 81       	ldd	r19, Z+1	; 0x01
 7e4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <detent>
 7e8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <detent+0x1>
 7ec:	28 17       	cp	r18, r24
 7ee:	39 07       	cpc	r19, r25
 7f0:	81 f5       	brne	.+96     	; 0x852 <main+0xcc>
					//Yes:
					c_Digit++; //c_digit++
 7f2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 7f6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 7fa:	01 96       	adiw	r24, 0x01	; 1
 7fc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 800:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
					DR = DR ? 0 : 1; //Change the direction
 804:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <DR>
 808:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <DR+0x1>
 80c:	21 e0       	ldi	r18, 0x01	; 1
 80e:	89 2b       	or	r24, r25
 810:	09 f0       	breq	.+2      	; 0x814 <main+0x8e>
 812:	20 e0       	ldi	r18, 0x00	; 0
 814:	82 2f       	mov	r24, r18
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <DR+0x1>
 81c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <DR>
					detent = 0;
 820:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <detent+0x1>
 824:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <detent>
					if (c_Digit > 3) { //Is c_digit > 3?
 828:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 82c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 830:	04 97       	sbiw	r24, 0x04	; 4
 832:	7c f0       	brlt	.+30     	; 0x852 <main+0xcc>
						//Yes:
						digitalWrite(B5, HIGH); //Light up the LED
 834:	61 e0       	ldi	r22, 0x01	; 1
 836:	70 e0       	ldi	r23, 0x00	; 0
 838:	8d e0       	ldi	r24, 0x0D	; 13
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 c6 02 	call	0x58c	; 0x58c <digitalWrite>
						locked = 0; //Set locked to 0
 840:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <locked+0x1>
 844:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <locked>
 848:	04 c0       	rjmp	.+8      	; 0x852 <main+0xcc>
					}
				}
			} else {
				//No: 
				reset(); //Reset variables
 84a:	0e 94 43 04 	call	0x886	; 0x886 <reset>
				blink_LED();//Blink the LED fast and reset everything
 84e:	0e 94 b5 00 	call	0x16a	; 0x16a <blink_LED>
			}
			delay(2);
 852:	62 e0       	ldi	r22, 0x02	; 2
 854:	70 e0       	ldi	r23, 0x00	; 0
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	0e 94 8a 03 	call	0x714	; 0x714 <delay>
	//Init components
	init_comp();
	//Main loop to handle the program
    while (1) {
		//Loop to handle the unlocking program
		while (locked) {
 85e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <locked>
 862:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <locked+0x1>
 866:	89 2b       	or	r24, r25
 868:	09 f0       	breq	.+2      	; 0x86c <main+0xe6>
 86a:	94 cf       	rjmp	.-216    	; 0x794 <main+0xe>
				reset(); //Reset variables
				blink_LED();//Blink the LED fast and reset everything
			}
			delay(2);
		}
		if (bit_clear(PINB, PINB7)){
 86c:	83 e2       	ldi	r24, 0x23	; 35
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	fc 01       	movw	r30, r24
 872:	80 81       	ld	r24, Z
 874:	88 23       	and	r24, r24
 876:	34 f0       	brlt	.+12     	; 0x884 <main+0xfe>
			locked = 1;
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <locked+0x1>
 880:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <locked>
		}
    }
 884:	86 cf       	rjmp	.-244    	; 0x792 <main+0xc>

00000886 <reset>:
}

void reset(void) {
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	cd b7       	in	r28, 0x3d	; 61
 88c:	de b7       	in	r29, 0x3e	; 62
	detent = 0;
 88e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <detent+0x1>
 892:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <detent>
	c_Digit = 0;
 896:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 89a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
	DR = 1;
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <DR+0x1>
 8a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <DR>
}
 8aa:	df 91       	pop	r29
 8ac:	cf 91       	pop	r28
 8ae:	08 95       	ret

000008b0 <__muluhisi3>:
 8b0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__umulhisi3>
 8b4:	a5 9f       	mul	r26, r21
 8b6:	90 0d       	add	r25, r0
 8b8:	b4 9f       	mul	r27, r20
 8ba:	90 0d       	add	r25, r0
 8bc:	a4 9f       	mul	r26, r20
 8be:	80 0d       	add	r24, r0
 8c0:	91 1d       	adc	r25, r1
 8c2:	11 24       	eor	r1, r1
 8c4:	08 95       	ret

000008c6 <__umulhisi3>:
 8c6:	a2 9f       	mul	r26, r18
 8c8:	b0 01       	movw	r22, r0
 8ca:	b3 9f       	mul	r27, r19
 8cc:	c0 01       	movw	r24, r0
 8ce:	a3 9f       	mul	r26, r19
 8d0:	70 0d       	add	r23, r0
 8d2:	81 1d       	adc	r24, r1
 8d4:	11 24       	eor	r1, r1
 8d6:	91 1d       	adc	r25, r1
 8d8:	b2 9f       	mul	r27, r18
 8da:	70 0d       	add	r23, r0
 8dc:	81 1d       	adc	r24, r1
 8de:	11 24       	eor	r1, r1
 8e0:	91 1d       	adc	r25, r1
 8e2:	08 95       	ret

000008e4 <_exit>:
 8e4:	f8 94       	cli

000008e6 <__stop_program>:
 8e6:	ff cf       	rjmp	.-2      	; 0x8e6 <__stop_program>
